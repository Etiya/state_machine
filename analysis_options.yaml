linter:
  rules:
#    - always_declare_return_types
#    - annotate_overrides
#    - avoid_empty_else
#    - avoid_init_to_null
#    - avoid_return_types_on_setters
#    - await_only_futures
#    - camel_case_types
    - cancel_subscriptions
    - close_sinks
#    - comment_references
#    - constant_identifier_names
#    - control_flow_in_finally
#    - empty_catches
#    - empty_constructor_bodies
#    - empty_statements
#    - hash_and_equals
#    - invariant_booleans
#    - iterable_contains_unrelated_type
#    - library_names
#    - library_prefixes
#    - list_remove_unrelated_type
#    - literal_only_boolean_expressions
#    - only_throw_errors
#    - overridden_fields
#    - package_api_docs
#    - package_names
#    - package_prefixed_library_names
#    - parameter_assignments
#    - prefer_final_fields
#    - prefer_final_locals
#    - prefer_is_not_empty
#    - public_member_api_docs
#    - slash_for_doc_comments
#    - sort_constructors_first
#    - sort_unnamed_constructors_first
#    - test_types_in_equals
#    - throw_in_finally
#    - type_annotate_public_apis
#    - type_init_formals
#    - unawaited_futures
#    - unnecessary_brace_in_string_interps
#    - unnecessary_getters_setters
#    - unrelated_type_equality_checks
#    - valid_regexps

# This rule forces overly verbose declaration of variables.
  #- always_specify_type

# This rule isn't currently enabled becaus there are valid uses for using 'as', such as
# verifying that an object is a specific mixin.
#    - avoid_as

# These rules were found to be unenforceable as they would require breaking changes or
# were too noisy.
#    - implementation_imports
#    - non_constant_identifier_names
#    - one_member_abstracts